import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

export interface Ticket {
	id?: string
	title: string
	price: number
	userId?: string
	version?: number
}


const ticketApi = createApi({
	reducerPath: 'ticketApi',
	baseQuery: fetchBaseQuery({
		baseUrl: '/', 
		credentials: 'include',
		mode: 'cors',
	}),
	tagTypes: ['Ticket','Tickets'], // Define tag types for cache management
	endpoints(builder) {
		return {
			// Fetch a list of available tickets
			getTickets: builder.query<Ticket[], void>({
				query: () => ({
					url: '/api/tickets',
					method: 'GET',
				}),
				providesTags: (result) =>
					result
						? [
								...result.map(({ id }) => ({ type: 'Ticket', id } as const)),
								{ type: 'Tickets', id: 'LIST' },
						  ]
						: [{ type: 'Tickets', id: 'LIST' }],
			}),

			// Fetch a specific ticket by id
			getTicketById: builder.query<Ticket, string>({
				query: (id) => ({
					url: `/api/tickets/${id}`,
					method: 'GET',
				}),
				providesTags: (result, error, id) => [{ type: 'Ticket', id }],
			}),

			// Create a new ticket
			createTicket: builder.mutation<Ticket, { title: string; price: number }>({
				query: (ticketData) => ({
					url: '/api/tickets',
					method: 'POST',
					body: ticketData,
				}),
				invalidatesTags: [{ type: 'Tickets', id: 'LIST' }], // Invalidate the ticket list to refresh it
			}),

			// Update an existing ticket
			updateTicket: builder.mutation<
				Ticket,
				{ id: string; title: string; price: number }
			>({
				query: ({ id, ...updateData }) => ({
					url: `/api/tickets/${id}`,
					method: 'PUT',
					body: updateData,
				}),
				invalidatesTags: (result, error, { id }) => [{ type: 'Ticket', id }],
			}),
		}
	},
})

export const {
	useGetTicketsQuery,
	useGetTicketByIdQuery,
	useCreateTicketMutation,
	useUpdateTicketMutation,
} = ticketApi

export { ticketApi }


// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

// // Define the types for the ticket-related data
// interface Ticket {
// 	id: string
// 	title: string
// 	price: number
// 	userId: string
// 	version: number
// }

// interface CreateTicketRequest {
// 	title: string
// 	price: number
// }

// interface UpdateTicketRequest extends CreateTicketRequest {
// 	id: string
// }

// export const ticketsApi = createApi({
// 	reducerPath: 'tickets',
// 	baseQuery: fetchBaseQuery({
// 		baseUrl: 'http://localhost:3000/api', // Update with your correct base URL
// 	}),
// 	tagTypes: ['Ticket', 'Tickets'],
// 	endpoints: (builder) => ({
// 		// Fetch a single ticket by ID
// 		fetchTicketById: builder.query<Ticket, string>({
// 			query: (id) => `/tickets/${id}`,
// 			providesTags: (result, error, id) => [{ type: 'Ticket', id }],
// 		}),

// 		// Fetch all tickets
// 		fetchAllTickets: builder.query<Ticket[], void>({
// 			query: () => '/tickets',
// 			providesTags: (result) =>
// 				result
// 					? [
// 							...result.map(({ id }) => ({ type: 'Ticket', id } as const)),
// 							{ type: 'Tickets', id: 'LIST' },
// 					  ]
// 					: [{ type: 'Tickets', id: 'LIST' }],
// 		}),

// 		// Create a new ticket
// 		createTicket: builder.mutation<Ticket, CreateTicketRequest>({
// 			query: (ticket) => ({
// 				url: '/tickets',
// 				method: 'POST',
// 				body: ticket,
// 			}),
// 			invalidatesTags: [{ type: 'Tickets', id: 'LIST' }],
// 		}),

// 		// Update an existing ticket
// 		updateTicket: builder.mutation<Ticket, UpdateTicketRequest>({
// 			query: (ticket) => ({
// 				url: `/tickets/${ticket.id}`,
// 				method: 'PUT',
// 				body: ticket,
// 			}),
// 			invalidatesTags: (result, error, { id }) => [{ type: 'Ticket', id }],
// 		}),
// 	}),
// })

// // Export the hooks generated by RTK Query for each of the endpoints
// export const {
// 	useFetchTicketByIdQuery,
// 	useFetchAllTicketsQuery,
// 	useCreateTicketMutation,
// 	useUpdateTicketMutation,
// } = ticketsApi

// export { ticketsApi }
